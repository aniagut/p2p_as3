{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/flex-layout/flex\";\nimport * as i4 from \"@angular/material/core\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/list\";\nfunction AppComponent_mat_list_item_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const value_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Numerical Value: \", value_r2, \"\");\n  }\n}\nfunction AppComponent_mat_list_item_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const value_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Numerical Value: \", value_r3, \"\");\n  }\n}\nexport class AppComponent {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.numericalValues = [];\n    this.csvCore2FilePath = 'data/core2_measurements.csv';\n    this.csvMqttFilePath = 'data/mqtt_measurements.csv';\n    this.search$ = this.httpClient.get('http://localhost:3000/api/v1/sensors/air-quality/tvoc');\n  }\n  ngOnInit() {\n    //\n    // this.csvCore2Watcher = chokidar.watch(this.csvCore2FilePath, {\n    //   ignoreInitial: true, // Ignore initial file state\n    // });\n    //\n    // this.csvMqttWatcher = chokidar.watch(this.csvMqttFilePath, {\n    //   ignoreInitial: true, // Ignore initial file state\n    // });\n    // this.listenForChanges();\n    this.search$.pipe(map(m => console.log(m)));\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[\"fxLayout\", \"row\", \"fxLayout.xs\", \"column\", \"fxLayoutAlign\", \"start start\", \"fxLayoutGap\", \"16px\"], [\"fxFlex\", \"50%\", \"fxFlex.xs\", \"100%\"], [1, \"scrollable-list\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-line\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Daring Do awesome IoT measuring data displaying tool!!!!!!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 1)(4, \"mat-card\")(5, \"mat-card-content\")(6, \"h3\");\n        i0.ɵɵtext(7, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"mat-list\");\n        i0.ɵɵtemplate(10, AppComponent_mat_list_item_10_Template, 3, 1, \"mat-list-item\", 3);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(11, \"div\", 1)(12, \"mat-card\")(13, \"mat-card-content\")(14, \"h3\");\n        i0.ɵɵtext(15, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 2)(17, \"mat-list\");\n        i0.ɵɵtemplate(18, AppComponent_mat_list_item_18_Template, 3, 1, \"mat-list-item\", 3);\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.numericalValues);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.numericalValues);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.DefaultLayoutDirective, i3.DefaultLayoutGapDirective, i3.DefaultLayoutAlignDirective, i3.DefaultFlexDirective, i4.MatLine, i5.MatCard, i5.MatCardContent, i6.MatList, i6.MatListItem],\n    styles: [\".scrollable-list[_ngcontent-%COMP%] {\\n  max-height: 500px;\\n  overflow-y: auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsaUJBQUE7RUFDQSxnQkFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLnNjcm9sbGFibGUtbGlzdCB7XHJcbiAgbWF4LWhlaWdodDogNTAwcHg7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"],\n    changeDetection: 0\n  });\n}","map":{"version":3,"names":["map","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","value_r2","value_r3","AppComponent","constructor","httpClient","numericalValues","csvCore2FilePath","csvMqttFilePath","search$","get","ngOnInit","pipe","m","console","log","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵtemplate","AppComponent_mat_list_item_10_Template","AppComponent_mat_list_item_18_Template","ɵɵproperty"],"sources":["C:\\Users\\annag\\OneDrive\\Pulpit\\a3_backend\\a3_frontend\\src\\app\\app.component.ts","C:\\Users\\annag\\OneDrive\\Pulpit\\a3_backend\\a3_frontend\\src\\app\\app.component.html"],"sourcesContent":["import {ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n// import * as fs from 'fs';\n// import * as csvParser from 'csv-parser';\n// import * as chokidar from 'chokidar';\nimport { HttpClient } from '@angular/common/http';\nimport { map, tap, Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent implements OnInit {\n  numericalValues: number[] = [];\n  csvCore2Watcher: any;\n  csvMqttWatcher: any;\n  csvCore2FilePath: string = 'data/core2_measurements.csv';\n  csvMqttFilePath: string = 'data/mqtt_measurements.csv';\n  search$: Observable<any> = this.httpClient.get('http://localhost:3000/api/v1/sensors/air-quality/tvoc');\n\n  constructor(private readonly httpClient: HttpClient) { }\n\n  ngOnInit(): void {\n    //\n    // this.csvCore2Watcher = chokidar.watch(this.csvCore2FilePath, {\n    //   ignoreInitial: true, // Ignore initial file state\n    // });\n    //\n    // this.csvMqttWatcher = chokidar.watch(this.csvMqttFilePath, {\n    //   ignoreInitial: true, // Ignore initial file state\n    // });\n\n    // this.listenForChanges();\n    this.search$.pipe(map(m => console.log(m)));\n\n  }\n\n  // private listenForChanges(): void {\n  //   fs.readFile(this.csvCore2FilePath, 'utf-8', (err, data) => {\n  //     if (err) {\n  //       console.error('Error reading file:', err);\n  //       return;\n  //     }\n  //   })\n  // }\n\n  //   this.csvCore2Watcher.on('change', (path: string) => {\n  //\n  //     // Read the updated CSV file\n  //     fs.readFile(this.csvCore2FilePath, 'utf-8', (err, data) => {\n  //       if (err) {\n  //         console.error('Error reading file:', err);\n  //         return;\n  //       }\n  //\n  //       this.readFirstLineFromCsv(data)\n  //         .then((line) => {\n  //           console.log(line);\n  //           if (line) {\n  //             console.log('First Line:', line);\n  //             // Update your UI component here with the new data (e.g., using a service or an event)\n  //           } else {\n  //             console.log('No lines found in the CSV.');\n  //           }\n  //         })\n  //         .catch((error) => {\n  //           console.error('Error:', error);\n  //         });\n  //     });\n  //   });\n  // }\n  //\n  // private readFirstLineFromCsv(csvString: string): Promise<string | null> {\n  //   return new Promise((resolve, reject) => {\n  //     const firstLine = csvString.split('\\n')[0];\n  //     if (!firstLine) {\n  //       resolve(null);\n  //       return;\n  //     }\n  //\n  //     const parser = csvParser({ headers: false });\n  //     const readStream = require('stream').Readable.from([firstLine]);\n  //\n  //     readStream.pipe(parser);\n  //\n  //     parser.on('data', (data) => {\n  //       readStream.destroy();\n  //       resolve(data);\n  //     });\n  //\n  //     parser.on('error', (error) => {\n  //       reject(error);\n  //     });\n  //   });\n  // }\n  //\n  // private getLatestData(type: string) {\n  //   const line = fs.readFileSync(type == 'core2' ? 'core2_measurements.csv': 'mqtt_measurements.csv')\n  // }\n  //\n  // private generateRandomValues(): number[] {\n  //   // Generate 8 random numerical values for demonstration\n  //   return Array.from({ length: 8 }, () => Math.floor(Math.random() * 100));\n  // }\n}\n","<h1>Daring Do awesome IoT measuring data displaying tool!!!!!!</h1>\n<div fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"16px\">\n  <!-- Left Grid Element -->\n  <div fxFlex=\"50%\" fxFlex.xs=\"100%\">\n    <mat-card>\n      <mat-card-content>\n        <h3>Title</h3>\n        <div class=\"scrollable-list\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let value of numericalValues\">\n              <p mat-line>Numerical Value: {{ value }}</p>\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n  <!-- Right Grid Element -->\n  <div fxFlex=\"50%\" fxFlex.xs=\"100%\">\n    <mat-card>\n      <mat-card-content>\n        <h3>Title</h3>\n        <div class=\"scrollable-list\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let value of numericalValues\">\n              <p mat-line>Numerical Value: {{ value }}</p>\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n"],"mappings":"AAKA,SAASA,GAAG,QAAyB,MAAM;;;;;;;;;;ICI/BC,EAAA,CAAAC,cAAA,oBAAqD;IACvCD,EAAA,CAAAE,MAAA,GAA4B;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAhCH,EAAA,CAAAI,SAAA,GAA4B;IAA5BJ,EAAA,CAAAK,kBAAA,sBAAAC,QAAA,KAA4B;;;;;IAe1CN,EAAA,CAAAC,cAAA,oBAAqD;IACvCD,EAAA,CAAAE,MAAA,GAA4B;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAhCH,EAAA,CAAAI,SAAA,GAA4B;IAA5BJ,EAAA,CAAAK,kBAAA,sBAAAE,QAAA,KAA4B;;;ADZtD,OAAM,MAAOC,YAAY;EAQvBC,YAA6BC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAPvC,KAAAC,eAAe,GAAa,EAAE;IAG9B,KAAAC,gBAAgB,GAAW,6BAA6B;IACxD,KAAAC,eAAe,GAAW,4BAA4B;IACtD,KAAAC,OAAO,GAAoB,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAC,uDAAuD,CAAC;EAEhD;EAEvDC,QAAQA,CAAA;IACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,CAACF,OAAO,CAACG,IAAI,CAAClB,GAAG,CAACmB,CAAC,IAAIC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC;EAE7C;EAAC,QAAAG,CAAA,G;qBAvBUb,YAAY,EAAAR,EAAA,CAAAsB,iBAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAZjB,YAAY;IAAAkB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCdzBhC,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAE,MAAA,iEAA0D;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACnEH,EAAA,CAAAC,cAAA,aAAwF;QAK5ED,EAAA,CAAAE,MAAA,YAAK;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACdH,EAAA,CAAAC,cAAA,aAA6B;QAEzBD,EAAA,CAAAkC,UAAA,KAAAC,sCAAA,2BAEgB;QAClBnC,EAAA,CAAAG,YAAA,EAAW;QAOnBH,EAAA,CAAAC,cAAA,cAAmC;QAGzBD,EAAA,CAAAE,MAAA,aAAK;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACdH,EAAA,CAAAC,cAAA,cAA6B;QAEzBD,EAAA,CAAAkC,UAAA,KAAAE,sCAAA,2BAEgB;QAClBpC,EAAA,CAAAG,YAAA,EAAW;;;QAnBwBH,EAAA,CAAAI,SAAA,IAAkB;QAAlBJ,EAAA,CAAAqC,UAAA,YAAAJ,GAAA,CAAAtB,eAAA,CAAkB;QAgBlBX,EAAA,CAAAI,SAAA,GAAkB;QAAlBJ,EAAA,CAAAqC,UAAA,YAAAJ,GAAA,CAAAtB,eAAA,CAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}