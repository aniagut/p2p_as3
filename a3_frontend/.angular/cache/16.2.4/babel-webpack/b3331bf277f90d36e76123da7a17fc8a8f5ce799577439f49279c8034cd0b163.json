{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/annag/OneDrive/Pulpit/a3_backend/a3_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  EventEmitter\n} = require('events');\nconst fs = require('fs');\nconst sysPath = require('path');\nconst {\n  promisify\n} = require('util');\nconst readdirp = require('readdirp');\nconst anymatch = require('anymatch').default;\nconst globParent = require('glob-parent');\nconst isGlob = require('is-glob');\nconst braces = require('braces');\nconst normalizePath = require('normalize-path');\nconst NodeFsHandler = require('./lib/nodefs-handler');\nconst FsEventsHandler = require('./lib/fsevents-handler');\nconst {\n  EV_ALL,\n  EV_READY,\n  EV_ADD,\n  EV_CHANGE,\n  EV_UNLINK,\n  EV_ADD_DIR,\n  EV_UNLINK_DIR,\n  EV_RAW,\n  EV_ERROR,\n  STR_CLOSE,\n  STR_END,\n  BACK_SLASH_RE,\n  DOUBLE_SLASH_RE,\n  SLASH_OR_BACK_SLASH_RE,\n  DOT_RE,\n  REPLACER_RE,\n  SLASH,\n  SLASH_SLASH,\n  BRACE_START,\n  BANG,\n  ONE_DOT,\n  TWO_DOTS,\n  GLOBSTAR,\n  SLASH_GLOBSTAR,\n  ANYMATCH_OPTS,\n  STRING_TYPE,\n  FUNCTION_TYPE,\n  EMPTY_STR,\n  EMPTY_FN,\n  isWindows,\n  isMacos,\n  isIBMi\n} = require('./lib/constants');\nconst stat = promisify(fs.stat);\nconst readdir = promisify(fs.readdir);\n\n/**\n * @typedef {String} Path\n * @typedef {'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'} EventName\n * @typedef {'readdir'|'watch'|'add'|'remove'|'change'} ThrottleType\n */\n\n/**\n *\n * @typedef {Object} WatchHelpers\n * @property {Boolean} followSymlinks\n * @property {'stat'|'lstat'} statMethod\n * @property {Path} path\n * @property {Path} watchPath\n * @property {Function} entryPath\n * @property {Boolean} hasGlob\n * @property {Object} globFilter\n * @property {Function} filterPath\n * @property {Function} filterDir\n */\n\nconst arrify = (value = []) => Array.isArray(value) ? value : [value];\nconst flatten = (list, result = []) => {\n  list.forEach(item => {\n    if (Array.isArray(item)) {\n      flatten(item, result);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\nconst unifyPaths = paths_ => {\n  /**\n   * @type {Array<String>}\n   */\n  const paths = flatten(arrify(paths_));\n  if (!paths.every(p => typeof p === STRING_TYPE)) {\n    throw new TypeError(`Non-string provided as watch path: ${paths}`);\n  }\n  return paths.map(normalizePathToUnix);\n};\n\n// If SLASH_SLASH occurs at the beginning of path, it is not replaced\n//     because \"//StoragePC/DrivePool/Movies\" is a valid network path\nconst toUnix = string => {\n  let str = string.replace(BACK_SLASH_RE, SLASH);\n  let prepend = false;\n  if (str.startsWith(SLASH_SLASH)) {\n    prepend = true;\n  }\n  while (str.match(DOUBLE_SLASH_RE)) {\n    str = str.replace(DOUBLE_SLASH_RE, SLASH);\n  }\n  if (prepend) {\n    str = SLASH + str;\n  }\n  return str;\n};\n\n// Our version of upath.normalize\n// TODO: this is not equal to path-normalize module - investigate why\nconst normalizePathToUnix = path => toUnix(sysPath.normalize(toUnix(path)));\nconst normalizeIgnored = (cwd = EMPTY_STR) => path => {\n  if (typeof path !== STRING_TYPE) return path;\n  return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));\n};\nconst getAbsolutePath = (path, cwd) => {\n  if (sysPath.isAbsolute(path)) {\n    return path;\n  }\n  if (path.startsWith(BANG)) {\n    return BANG + sysPath.join(cwd, path.slice(1));\n  }\n  return sysPath.join(cwd, path);\n};\nconst undef = (opts, key) => opts[key] === undefined;\n\n/**\n * Directory entry.\n * @property {Path} path\n * @property {Set<Path>} items\n */\nclass DirEntry {\n  /**\n   * @param {Path} dir\n   * @param {Function} removeWatcher\n   */\n  constructor(dir, removeWatcher) {\n    this.path = dir;\n    this._removeWatcher = removeWatcher;\n    /** @type {Set<Path>} */\n    this.items = new Set();\n  }\n  add(item) {\n    const {\n      items\n    } = this;\n    if (!items) return;\n    if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);\n  }\n  remove(item) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        items\n      } = _this;\n      if (!items) return;\n      items.delete(item);\n      if (items.size > 0) return;\n      const dir = _this.path;\n      try {\n        yield readdir(dir);\n      } catch (err) {\n        if (_this._removeWatcher) {\n          _this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));\n        }\n      }\n    })();\n  }\n  has(item) {\n    const {\n      items\n    } = this;\n    if (!items) return;\n    return items.has(item);\n  }\n\n  /**\n   * @returns {Array<String>}\n   */\n  getChildren() {\n    const {\n      items\n    } = this;\n    if (!items) return;\n    return [...items.values()];\n  }\n  dispose() {\n    this.items.clear();\n    delete this.path;\n    delete this._removeWatcher;\n    delete this.items;\n    Object.freeze(this);\n  }\n}\nconst STAT_METHOD_F = 'stat';\nconst STAT_METHOD_L = 'lstat';\nclass WatchHelper {\n  constructor(path, watchPath, follow, fsw) {\n    this.fsw = fsw;\n    this.path = path = path.replace(REPLACER_RE, EMPTY_STR);\n    this.watchPath = watchPath;\n    this.fullWatchPath = sysPath.resolve(watchPath);\n    this.hasGlob = watchPath !== path;\n    /** @type {object|boolean} */\n    if (path === EMPTY_STR) this.hasGlob = false;\n    this.globSymlink = this.hasGlob && follow ? undefined : false;\n    this.globFilter = this.hasGlob ? anymatch(path, undefined, ANYMATCH_OPTS) : false;\n    this.dirParts = this.getDirParts(path);\n    this.dirParts.forEach(parts => {\n      if (parts.length > 1) parts.pop();\n    });\n    this.followSymlinks = follow;\n    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;\n  }\n  checkGlobSymlink(entry) {\n    // only need to resolve once\n    // first entry should always have entry.parentDir === EMPTY_STR\n    if (this.globSymlink === undefined) {\n      this.globSymlink = entry.fullParentDir === this.fullWatchPath ? false : {\n        realPath: entry.fullParentDir,\n        linkPath: this.fullWatchPath\n      };\n    }\n    if (this.globSymlink) {\n      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);\n    }\n    return entry.fullPath;\n  }\n  entryPath(entry) {\n    return sysPath.join(this.watchPath, sysPath.relative(this.watchPath, this.checkGlobSymlink(entry)));\n  }\n  filterPath(entry) {\n    const {\n      stats\n    } = entry;\n    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);\n    const resolvedPath = this.entryPath(entry);\n    const matchesGlob = this.hasGlob && typeof this.globFilter === FUNCTION_TYPE ? this.globFilter(resolvedPath) : true;\n    return matchesGlob && this.fsw._isntIgnored(resolvedPath, stats) && this.fsw._hasReadPermissions(stats);\n  }\n  getDirParts(path) {\n    if (!this.hasGlob) return [];\n    const parts = [];\n    const expandedPath = path.includes(BRACE_START) ? braces.expand(path) : [path];\n    expandedPath.forEach(path => {\n      parts.push(sysPath.relative(this.watchPath, path).split(SLASH_OR_BACK_SLASH_RE));\n    });\n    return parts;\n  }\n  filterDir(entry) {\n    if (this.hasGlob) {\n      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));\n      let globstar = false;\n      this.unmatchedGlob = !this.dirParts.some(parts => {\n        return parts.every((part, i) => {\n          if (part === GLOBSTAR) globstar = true;\n          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);\n        });\n      });\n    }\n    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);\n  }\n}\n\n/**\n * Watches files & directories for changes. Emitted events:\n * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`\n *\n *     new FSWatcher()\n *       .add(directories)\n *       .on('add', path => log('File', path, 'was added'))\n */\nclass FSWatcher extends EventEmitter {\n  // Not indenting methods for history sake; for now.\n  constructor(_opts) {\n    super();\n    const opts = {};\n    if (_opts) Object.assign(opts, _opts); // for frozen objects\n\n    /** @type {Map<String, DirEntry>} */\n    this._watched = new Map();\n    /** @type {Map<String, Array>} */\n    this._closers = new Map();\n    /** @type {Set<String>} */\n    this._ignoredPaths = new Set();\n\n    /** @type {Map<ThrottleType, Map>} */\n    this._throttled = new Map();\n\n    /** @type {Map<Path, String|Boolean>} */\n    this._symlinkPaths = new Map();\n    this._streams = new Set();\n    this.closed = false;\n\n    // Set up default options.\n    if (undef(opts, 'persistent')) opts.persistent = true;\n    if (undef(opts, 'ignoreInitial')) opts.ignoreInitial = false;\n    if (undef(opts, 'ignorePermissionErrors')) opts.ignorePermissionErrors = false;\n    if (undef(opts, 'interval')) opts.interval = 100;\n    if (undef(opts, 'binaryInterval')) opts.binaryInterval = 300;\n    if (undef(opts, 'disableGlobbing')) opts.disableGlobbing = false;\n    opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;\n\n    // Enable fsevents on OS X when polling isn't explicitly enabled.\n    if (undef(opts, 'useFsEvents')) opts.useFsEvents = !opts.usePolling;\n\n    // If we can't use fsevents, ensure the options reflect it's disabled.\n    const canUseFsEvents = FsEventsHandler.canUse();\n    if (!canUseFsEvents) opts.useFsEvents = false;\n\n    // Use polling on Mac if not using fsevents.\n    // Other platforms use non-polling fs_watch.\n    if (undef(opts, 'usePolling') && !opts.useFsEvents) {\n      opts.usePolling = isMacos;\n    }\n\n    // Always default to polling on IBM i because fs.watch() is not available on IBM i.\n    if (isIBMi) {\n      opts.usePolling = true;\n    }\n\n    // Global override (useful for end-developers that need to force polling for all\n    // instances of chokidar, regardless of usage/dependency depth)\n    const envPoll = process.env.CHOKIDAR_USEPOLLING;\n    if (envPoll !== undefined) {\n      const envLower = envPoll.toLowerCase();\n      if (envLower === 'false' || envLower === '0') {\n        opts.usePolling = false;\n      } else if (envLower === 'true' || envLower === '1') {\n        opts.usePolling = true;\n      } else {\n        opts.usePolling = !!envLower;\n      }\n    }\n    const envInterval = process.env.CHOKIDAR_INTERVAL;\n    if (envInterval) {\n      opts.interval = Number.parseInt(envInterval, 10);\n    }\n\n    // Editor atomic write normalization enabled by default with fs.watch\n    if (undef(opts, 'atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;\n    if (opts.atomic) this._pendingUnlinks = new Map();\n    if (undef(opts, 'followSymlinks')) opts.followSymlinks = true;\n    if (undef(opts, 'awaitWriteFinish')) opts.awaitWriteFinish = false;\n    if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};\n    const awf = opts.awaitWriteFinish;\n    if (awf) {\n      if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;\n      if (!awf.pollInterval) awf.pollInterval = 100;\n      this._pendingWrites = new Map();\n    }\n    if (opts.ignored) opts.ignored = arrify(opts.ignored);\n    let readyCalls = 0;\n    this._emitReady = () => {\n      readyCalls++;\n      if (readyCalls >= this._readyCount) {\n        this._emitReady = EMPTY_FN;\n        this._readyEmitted = true;\n        // use process.nextTick to allow time for listener to be bound\n        process.nextTick(() => this.emit(EV_READY));\n      }\n    };\n    this._emitRaw = (...args) => this.emit(EV_RAW, ...args);\n    this._readyEmitted = false;\n    this.options = opts;\n\n    // Initialize with proper watcher.\n    if (opts.useFsEvents) {\n      this._fsEventsHandler = new FsEventsHandler(this);\n    } else {\n      this._nodeFsHandler = new NodeFsHandler(this);\n    }\n\n    // You’re frozen when your heart’s not open.\n    Object.freeze(opts);\n  }\n\n  // Public methods\n\n  /**\n   * Adds paths to be watched on an existing FSWatcher instance\n   * @param {Path|Array<Path>} paths_\n   * @param {String=} _origAdd private; for handling non-existent paths to be watched\n   * @param {Boolean=} _internal private; indicates a non-user add\n   * @returns {FSWatcher} for chaining\n   */\n  add(paths_, _origAdd, _internal) {\n    var _this2 = this;\n    const {\n      cwd,\n      disableGlobbing\n    } = this.options;\n    this.closed = false;\n    let paths = unifyPaths(paths_);\n    if (cwd) {\n      paths = paths.map(path => {\n        const absPath = getAbsolutePath(path, cwd);\n\n        // Check `path` instead of `absPath` because the cwd portion can't be a glob\n        if (disableGlobbing || !isGlob(path)) {\n          return absPath;\n        }\n        return normalizePath(absPath);\n      });\n    }\n\n    // set aside negated glob strings\n    paths = paths.filter(path => {\n      if (path.startsWith(BANG)) {\n        this._ignoredPaths.add(path.slice(1));\n        return false;\n      }\n\n      // if a path is being added that was previously ignored, stop ignoring it\n      this._ignoredPaths.delete(path);\n      this._ignoredPaths.delete(path + SLASH_GLOBSTAR);\n\n      // reset the cached userIgnored anymatch fn\n      // to make ignoredPaths changes effective\n      this._userIgnored = undefined;\n      return true;\n    });\n    if (this.options.useFsEvents && this._fsEventsHandler) {\n      if (!this._readyCount) this._readyCount = paths.length;\n      if (this.options.persistent) this._readyCount *= 2;\n      paths.forEach(path => this._fsEventsHandler._addToFsEvents(path));\n    } else {\n      if (!this._readyCount) this._readyCount = 0;\n      this._readyCount += paths.length;\n      Promise.all(paths.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (path) {\n          const res = yield _this2._nodeFsHandler._addToNodeFs(path, !_internal, 0, 0, _origAdd);\n          if (res) _this2._emitReady();\n          return res;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }())).then(results => {\n        if (this.closed) return;\n        results.filter(item => item).forEach(item => {\n          this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));\n        });\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Close watchers or start ignoring events from specified paths.\n   * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs\n   * @returns {FSWatcher} for chaining\n  */\n  unwatch(paths_) {\n    if (this.closed) return this;\n    const paths = unifyPaths(paths_);\n    const {\n      cwd\n    } = this.options;\n    paths.forEach(path => {\n      // convert to absolute path unless relative path already matches\n      if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {\n        if (cwd) path = sysPath.join(cwd, path);\n        path = sysPath.resolve(path);\n      }\n      this._closePath(path);\n      this._ignoredPaths.add(path);\n      if (this._watched.has(path)) {\n        this._ignoredPaths.add(path + SLASH_GLOBSTAR);\n      }\n\n      // reset the cached userIgnored anymatch fn\n      // to make ignoredPaths changes effective\n      this._userIgnored = undefined;\n    });\n    return this;\n  }\n\n  /**\n   * Close watchers and remove all listeners from watched paths.\n   * @returns {Promise<void>}.\n  */\n  close() {\n    if (this.closed) return this._closePromise;\n    this.closed = true;\n\n    // Memory management.\n    this.removeAllListeners();\n    const closers = [];\n    this._closers.forEach(closerList => closerList.forEach(closer => {\n      const promise = closer();\n      if (promise instanceof Promise) closers.push(promise);\n    }));\n    this._streams.forEach(stream => stream.destroy());\n    this._userIgnored = undefined;\n    this._readyCount = 0;\n    this._readyEmitted = false;\n    this._watched.forEach(dirent => dirent.dispose());\n    ['closers', 'watched', 'streams', 'symlinkPaths', 'throttled'].forEach(key => {\n      this[`_${key}`].clear();\n    });\n    this._closePromise = closers.length ? Promise.all(closers).then(() => undefined) : Promise.resolve();\n    return this._closePromise;\n  }\n\n  /**\n   * Expose list of watched paths\n   * @returns {Object} for chaining\n  */\n  getWatched() {\n    const watchList = {};\n    this._watched.forEach((entry, dir) => {\n      const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;\n      watchList[key || ONE_DOT] = entry.getChildren().sort();\n    });\n    return watchList;\n  }\n  emitWithAll(event, args) {\n    this.emit(...args);\n    if (event !== EV_ERROR) this.emit(EV_ALL, ...args);\n  }\n\n  // Common helpers\n  // --------------\n\n  /**\n   * Normalize and emit events.\n   * Calling _emit DOES NOT MEAN emit() would be called!\n   * @param {EventName} event Type of event\n   * @param {Path} path File or directory path\n   * @param {*=} val1 arguments to be passed with event\n   * @param {*=} val2\n   * @param {*=} val3\n   * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag\n   */\n  _emit(event, path, val1, val2, val3) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.closed) return;\n      const opts = _this3.options;\n      if (isWindows) path = sysPath.normalize(path);\n      if (opts.cwd) path = sysPath.relative(opts.cwd, path);\n      /** @type Array<any> */\n      const args = [event, path];\n      if (val3 !== undefined) args.push(val1, val2, val3);else if (val2 !== undefined) args.push(val1, val2);else if (val1 !== undefined) args.push(val1);\n      const awf = opts.awaitWriteFinish;\n      let pw;\n      if (awf && (pw = _this3._pendingWrites.get(path))) {\n        pw.lastChange = new Date();\n        return _this3;\n      }\n      if (opts.atomic) {\n        if (event === EV_UNLINK) {\n          _this3._pendingUnlinks.set(path, args);\n          setTimeout(() => {\n            _this3._pendingUnlinks.forEach((entry, path) => {\n              _this3.emit(...entry);\n              _this3.emit(EV_ALL, ...entry);\n              _this3._pendingUnlinks.delete(path);\n            });\n          }, typeof opts.atomic === 'number' ? opts.atomic : 100);\n          return _this3;\n        }\n        if (event === EV_ADD && _this3._pendingUnlinks.has(path)) {\n          event = args[0] = EV_CHANGE;\n          _this3._pendingUnlinks.delete(path);\n        }\n      }\n      if (awf && (event === EV_ADD || event === EV_CHANGE) && _this3._readyEmitted) {\n        const awfEmit = (err, stats) => {\n          if (err) {\n            event = args[0] = EV_ERROR;\n            args[1] = err;\n            _this3.emitWithAll(event, args);\n          } else if (stats) {\n            // if stats doesn't exist the file must have been deleted\n            if (args.length > 2) {\n              args[2] = stats;\n            } else {\n              args.push(stats);\n            }\n            _this3.emitWithAll(event, args);\n          }\n        };\n        _this3._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);\n        return _this3;\n      }\n      if (event === EV_CHANGE) {\n        const isThrottled = !_this3._throttle(EV_CHANGE, path, 50);\n        if (isThrottled) return _this3;\n      }\n      if (opts.alwaysStat && val1 === undefined && (event === EV_ADD || event === EV_ADD_DIR || event === EV_CHANGE)) {\n        const fullPath = opts.cwd ? sysPath.join(opts.cwd, path) : path;\n        let stats;\n        try {\n          stats = yield stat(fullPath);\n        } catch (err) {}\n        // Suppress event when fs_stat fails, to avoid sending undefined 'stat'\n        if (!stats || _this3.closed) return;\n        args.push(stats);\n      }\n      _this3.emitWithAll(event, args);\n      return _this3;\n    })();\n  }\n\n  /**\n   * Common handler for errors\n   * @param {Error} error\n   * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag\n   */\n  _handleError(error) {\n    const code = error && error.code;\n    if (error && code !== 'ENOENT' && code !== 'ENOTDIR' && (!this.options.ignorePermissionErrors || code !== 'EPERM' && code !== 'EACCES')) {\n      this.emit(EV_ERROR, error);\n    }\n    return error || this.closed;\n  }\n\n  /**\n   * Helper utility for throttling\n   * @param {ThrottleType} actionType type being throttled\n   * @param {Path} path being acted upon\n   * @param {Number} timeout duration of time to suppress duplicate actions\n   * @returns {Object|false} tracking object or false if action should be suppressed\n   */\n  _throttle(actionType, path, timeout) {\n    if (!this._throttled.has(actionType)) {\n      this._throttled.set(actionType, new Map());\n    }\n\n    /** @type {Map<Path, Object>} */\n    const action = this._throttled.get(actionType);\n    /** @type {Object} */\n    const actionPath = action.get(path);\n    if (actionPath) {\n      actionPath.count++;\n      return false;\n    }\n    let timeoutObject;\n    const clear = () => {\n      const item = action.get(path);\n      const count = item ? item.count : 0;\n      action.delete(path);\n      clearTimeout(timeoutObject);\n      if (item) clearTimeout(item.timeoutObject);\n      return count;\n    };\n    timeoutObject = setTimeout(clear, timeout);\n    const thr = {\n      timeoutObject,\n      clear,\n      count: 0\n    };\n    action.set(path, thr);\n    return thr;\n  }\n  _incrReadyCount() {\n    return this._readyCount++;\n  }\n\n  /**\n   * Awaits write operation to finish.\n   * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.\n   * @param {Path} path being acted upon\n   * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished\n   * @param {EventName} event\n   * @param {Function} awfEmit Callback to be called when ready for event to be emitted.\n   */\n  _awaitWriteFinish(path, threshold, event, awfEmit) {\n    let timeoutHandler;\n    let fullPath = path;\n    if (this.options.cwd && !sysPath.isAbsolute(path)) {\n      fullPath = sysPath.join(this.options.cwd, path);\n    }\n    const now = new Date();\n    const awaitWriteFinish = prevStat => {\n      fs.stat(fullPath, (err, curStat) => {\n        if (err || !this._pendingWrites.has(path)) {\n          if (err && err.code !== 'ENOENT') awfEmit(err);\n          return;\n        }\n        const now = Number(new Date());\n        if (prevStat && curStat.size !== prevStat.size) {\n          this._pendingWrites.get(path).lastChange = now;\n        }\n        const pw = this._pendingWrites.get(path);\n        const df = now - pw.lastChange;\n        if (df >= threshold) {\n          this._pendingWrites.delete(path);\n          awfEmit(undefined, curStat);\n        } else {\n          timeoutHandler = setTimeout(awaitWriteFinish, this.options.awaitWriteFinish.pollInterval, curStat);\n        }\n      });\n    };\n    if (!this._pendingWrites.has(path)) {\n      this._pendingWrites.set(path, {\n        lastChange: now,\n        cancelWait: () => {\n          this._pendingWrites.delete(path);\n          clearTimeout(timeoutHandler);\n          return event;\n        }\n      });\n      timeoutHandler = setTimeout(awaitWriteFinish, this.options.awaitWriteFinish.pollInterval);\n    }\n  }\n  _getGlobIgnored() {\n    return [...this._ignoredPaths.values()];\n  }\n\n  /**\n   * Determines whether user has asked to ignore this path.\n   * @param {Path} path filepath or dir\n   * @param {fs.Stats=} stats result of fs.stat\n   * @returns {Boolean}\n   */\n  _isIgnored(path, stats) {\n    if (this.options.atomic && DOT_RE.test(path)) return true;\n    if (!this._userIgnored) {\n      const {\n        cwd\n      } = this.options;\n      const ign = this.options.ignored;\n      const ignored = ign && ign.map(normalizeIgnored(cwd));\n      const paths = arrify(ignored).filter(path => typeof path === STRING_TYPE && !isGlob(path)).map(path => path + SLASH_GLOBSTAR);\n      const list = this._getGlobIgnored().map(normalizeIgnored(cwd)).concat(ignored, paths);\n      this._userIgnored = anymatch(list, undefined, ANYMATCH_OPTS);\n    }\n    return this._userIgnored([path, stats]);\n  }\n  _isntIgnored(path, stat) {\n    return !this._isIgnored(path, stat);\n  }\n\n  /**\n   * Provides a set of common helpers and properties relating to symlink and glob handling.\n   * @param {Path} path file, directory, or glob pattern being watched\n   * @param {Number=} depth at any depth > 0, this isn't a glob\n   * @returns {WatchHelper} object containing helpers for this path\n   */\n  _getWatchHelpers(path, depth) {\n    const watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);\n    const follow = this.options.followSymlinks;\n    return new WatchHelper(path, watchPath, follow, this);\n  }\n\n  // Directory helpers\n  // -----------------\n\n  /**\n   * Provides directory tracking objects\n   * @param {String} directory path of the directory\n   * @returns {DirEntry} the directory's tracking object\n   */\n  _getWatchedDir(directory) {\n    if (!this._boundRemove) this._boundRemove = this._remove.bind(this);\n    const dir = sysPath.resolve(directory);\n    if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));\n    return this._watched.get(dir);\n  }\n\n  // File helpers\n  // ------------\n\n  /**\n   * Check for read permissions.\n   * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405\n   * @param {fs.Stats} stats - object, result of fs_stat\n   * @returns {Boolean} indicates whether the file can be read\n  */\n  _hasReadPermissions(stats) {\n    if (this.options.ignorePermissionErrors) return true;\n\n    // stats.mode may be bigint\n    const md = stats && Number.parseInt(stats.mode, 10);\n    const st = md & 0o777;\n    const it = Number.parseInt(st.toString(8)[0], 10);\n    return Boolean(4 & it);\n  }\n\n  /**\n   * Handles emitting unlink events for\n   * files and directories, and via recursion, for\n   * files and directories within directories that are unlinked\n   * @param {String} directory within which the following item is located\n   * @param {String} item      base path of item/directory\n   * @returns {void}\n  */\n  _remove(directory, item, isDirectory) {\n    // if what is being deleted is a directory, get that directory's paths\n    // for recursive deleting and cleaning of watched object\n    // if it is not a directory, nestedDirectoryChildren will be empty array\n    const path = sysPath.join(directory, item);\n    const fullPath = sysPath.resolve(path);\n    isDirectory = isDirectory != null ? isDirectory : this._watched.has(path) || this._watched.has(fullPath);\n\n    // prevent duplicate handling in case of arriving here nearly simultaneously\n    // via multiple paths (such as _handleFile and _handleDir)\n    if (!this._throttle('remove', path, 100)) return;\n\n    // if the only watched file is removed, watch for its return\n    if (!isDirectory && !this.options.useFsEvents && this._watched.size === 1) {\n      this.add(directory, item, true);\n    }\n\n    // This will create a new entry in the watched object in either case\n    // so we got to do the directory check beforehand\n    const wp = this._getWatchedDir(path);\n    const nestedDirectoryChildren = wp.getChildren();\n\n    // Recursively remove children directories / files.\n    nestedDirectoryChildren.forEach(nested => this._remove(path, nested));\n\n    // Check if item was on the watched list and remove it\n    const parent = this._getWatchedDir(directory);\n    const wasTracked = parent.has(item);\n    parent.remove(item);\n\n    // Fixes issue #1042 -> Relative paths were detected and added as symlinks\n    // (https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),\n    // but never removed from the map in case the path was deleted.\n    // This leads to an incorrect state if the path was recreated:\n    // https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553\n    if (this._symlinkPaths.has(fullPath)) {\n      this._symlinkPaths.delete(fullPath);\n    }\n\n    // If we wait for this file to be fully written, cancel the wait.\n    let relPath = path;\n    if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n    if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\n      const event = this._pendingWrites.get(relPath).cancelWait();\n      if (event === EV_ADD) return;\n    }\n\n    // The Entry will either be a directory that just got removed\n    // or a bogus entry to a file, in either case we have to remove it\n    this._watched.delete(path);\n    this._watched.delete(fullPath);\n    const eventName = isDirectory ? EV_UNLINK_DIR : EV_UNLINK;\n    if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);\n\n    // Avoid conflicts if we later create another file with the same name\n    if (!this.options.useFsEvents) {\n      this._closePath(path);\n    }\n  }\n\n  /**\n   * Closes all watchers for a path\n   * @param {Path} path\n   */\n  _closePath(path) {\n    this._closeFile(path);\n    const dir = sysPath.dirname(path);\n    this._getWatchedDir(dir).remove(sysPath.basename(path));\n  }\n\n  /**\n   * Closes only file-specific watchers\n   * @param {Path} path\n   */\n  _closeFile(path) {\n    const closers = this._closers.get(path);\n    if (!closers) return;\n    closers.forEach(closer => closer());\n    this._closers.delete(path);\n  }\n\n  /**\n   *\n   * @param {Path} path\n   * @param {Function} closer\n   */\n  _addPathCloser(path, closer) {\n    if (!closer) return;\n    let list = this._closers.get(path);\n    if (!list) {\n      list = [];\n      this._closers.set(path, list);\n    }\n    list.push(closer);\n  }\n  _readdirp(root, opts) {\n    if (this.closed) return;\n    const options = {\n      type: EV_ALL,\n      alwaysStat: true,\n      lstat: true,\n      ...opts\n    };\n    let stream = readdirp(root, options);\n    this._streams.add(stream);\n    stream.once(STR_CLOSE, () => {\n      stream = undefined;\n    });\n    stream.once(STR_END, () => {\n      if (stream) {\n        this._streams.delete(stream);\n        stream = undefined;\n      }\n    });\n    return stream;\n  }\n}\n\n// Export FSWatcher class\nexports.FSWatcher = FSWatcher;\n\n/**\n * Instantiates watcher with paths to be tracked.\n * @param {String|Array<String>} paths file/directory paths and/or globs\n * @param {Object=} options chokidar opts\n * @returns an instance of FSWatcher for chaining.\n */\nconst watch = (paths, options) => {\n  const watcher = new FSWatcher(options);\n  watcher.add(paths);\n  return watcher;\n};\nexports.watch = watch;","map":{"version":3,"names":["_asyncToGenerator","require","default","EventEmitter","fs","sysPath","promisify","readdirp","anymatch","globParent","isGlob","braces","normalizePath","NodeFsHandler","FsEventsHandler","EV_ALL","EV_READY","EV_ADD","EV_CHANGE","EV_UNLINK","EV_ADD_DIR","EV_UNLINK_DIR","EV_RAW","EV_ERROR","STR_CLOSE","STR_END","BACK_SLASH_RE","DOUBLE_SLASH_RE","SLASH_OR_BACK_SLASH_RE","DOT_RE","REPLACER_RE","SLASH","SLASH_SLASH","BRACE_START","BANG","ONE_DOT","TWO_DOTS","GLOBSTAR","SLASH_GLOBSTAR","ANYMATCH_OPTS","STRING_TYPE","FUNCTION_TYPE","EMPTY_STR","EMPTY_FN","isWindows","isMacos","isIBMi","stat","readdir","arrify","value","Array","isArray","flatten","list","result","forEach","item","push","unifyPaths","paths_","paths","every","p","TypeError","map","normalizePathToUnix","toUnix","string","str","replace","prepend","startsWith","match","path","normalize","normalizeIgnored","cwd","isAbsolute","join","getAbsolutePath","slice","undef","opts","key","undefined","DirEntry","constructor","dir","removeWatcher","_removeWatcher","items","Set","add","remove","_this","delete","size","err","dirname","basename","has","getChildren","values","dispose","clear","Object","freeze","STAT_METHOD_F","STAT_METHOD_L","WatchHelper","watchPath","follow","fsw","fullWatchPath","resolve","hasGlob","globSymlink","globFilter","dirParts","getDirParts","parts","length","pop","followSymlinks","statMethod","checkGlobSymlink","entry","fullParentDir","realPath","linkPath","fullPath","entryPath","relative","filterPath","stats","isSymbolicLink","filterDir","resolvedPath","matchesGlob","_isntIgnored","_hasReadPermissions","expandedPath","includes","expand","split","entryParts","globstar","unmatchedGlob","some","part","i","FSWatcher","_opts","assign","_watched","Map","_closers","_ignoredPaths","_throttled","_symlinkPaths","_streams","closed","persistent","ignoreInitial","ignorePermissionErrors","interval","binaryInterval","disableGlobbing","enableBinaryInterval","useFsEvents","usePolling","canUseFsEvents","canUse","envPoll","process","env","CHOKIDAR_USEPOLLING","envLower","toLowerCase","envInterval","CHOKIDAR_INTERVAL","Number","parseInt","atomic","_pendingUnlinks","awaitWriteFinish","awf","stabilityThreshold","pollInterval","_pendingWrites","ignored","readyCalls","_emitReady","_readyCount","_readyEmitted","nextTick","emit","_emitRaw","args","options","_fsEventsHandler","_nodeFsHandler","_origAdd","_internal","_this2","absPath","filter","_userIgnored","_addToFsEvents","Promise","all","_ref","res","_addToNodeFs","_x","apply","arguments","then","results","unwatch","_closePath","close","_closePromise","removeAllListeners","closers","closerList","closer","promise","stream","destroy","dirent","getWatched","watchList","sort","emitWithAll","event","_emit","val1","val2","val3","_this3","pw","get","lastChange","Date","set","setTimeout","awfEmit","_awaitWriteFinish","isThrottled","_throttle","alwaysStat","_handleError","error","code","actionType","timeout","action","actionPath","count","timeoutObject","clearTimeout","thr","_incrReadyCount","threshold","timeoutHandler","now","prevStat","curStat","df","cancelWait","_getGlobIgnored","_isIgnored","test","ign","concat","_getWatchHelpers","depth","_getWatchedDir","directory","_boundRemove","_remove","bind","md","mode","st","it","toString","Boolean","isDirectory","wp","nestedDirectoryChildren","nested","parent","wasTracked","relPath","eventName","_closeFile","_addPathCloser","_readdirp","root","type","lstat","once","exports","watch","watcher"],"sources":["C:/Users/annag/OneDrive/Pulpit/a3_backend/a3_frontend/node_modules/chokidar/index.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\nconst fs = require('fs');\nconst sysPath = require('path');\nconst { promisify } = require('util');\nconst readdirp = require('readdirp');\nconst anymatch = require('anymatch').default;\nconst globParent = require('glob-parent');\nconst isGlob = require('is-glob');\nconst braces = require('braces');\nconst normalizePath = require('normalize-path');\n\nconst NodeFsHandler = require('./lib/nodefs-handler');\nconst FsEventsHandler = require('./lib/fsevents-handler');\nconst {\n  EV_ALL,\n  EV_READY,\n  EV_ADD,\n  EV_CHANGE,\n  EV_UNLINK,\n  EV_ADD_DIR,\n  EV_UNLINK_DIR,\n  EV_RAW,\n  EV_ERROR,\n\n  STR_CLOSE,\n  STR_END,\n\n  BACK_SLASH_RE,\n  DOUBLE_SLASH_RE,\n  SLASH_OR_BACK_SLASH_RE,\n  DOT_RE,\n  REPLACER_RE,\n\n  SLASH,\n  SLASH_SLASH,\n  BRACE_START,\n  BANG,\n  ONE_DOT,\n  TWO_DOTS,\n  GLOBSTAR,\n  SLASH_GLOBSTAR,\n  ANYMATCH_OPTS,\n  STRING_TYPE,\n  FUNCTION_TYPE,\n  EMPTY_STR,\n  EMPTY_FN,\n\n  isWindows,\n  isMacos,\n  isIBMi\n} = require('./lib/constants');\n\nconst stat = promisify(fs.stat);\nconst readdir = promisify(fs.readdir);\n\n/**\n * @typedef {String} Path\n * @typedef {'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'} EventName\n * @typedef {'readdir'|'watch'|'add'|'remove'|'change'} ThrottleType\n */\n\n/**\n *\n * @typedef {Object} WatchHelpers\n * @property {Boolean} followSymlinks\n * @property {'stat'|'lstat'} statMethod\n * @property {Path} path\n * @property {Path} watchPath\n * @property {Function} entryPath\n * @property {Boolean} hasGlob\n * @property {Object} globFilter\n * @property {Function} filterPath\n * @property {Function} filterDir\n */\n\nconst arrify = (value = []) => Array.isArray(value) ? value : [value];\nconst flatten = (list, result = []) => {\n  list.forEach(item => {\n    if (Array.isArray(item)) {\n      flatten(item, result);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\nconst unifyPaths = (paths_) => {\n  /**\n   * @type {Array<String>}\n   */\n  const paths = flatten(arrify(paths_));\n  if (!paths.every(p => typeof p === STRING_TYPE)) {\n    throw new TypeError(`Non-string provided as watch path: ${paths}`);\n  }\n  return paths.map(normalizePathToUnix);\n};\n\n// If SLASH_SLASH occurs at the beginning of path, it is not replaced\n//     because \"//StoragePC/DrivePool/Movies\" is a valid network path\nconst toUnix = (string) => {\n  let str = string.replace(BACK_SLASH_RE, SLASH);\n  let prepend = false;\n  if (str.startsWith(SLASH_SLASH)) {\n    prepend = true;\n  }\n  while (str.match(DOUBLE_SLASH_RE)) {\n    str = str.replace(DOUBLE_SLASH_RE, SLASH);\n  }\n  if (prepend) {\n    str = SLASH + str;\n  }\n  return str;\n};\n\n// Our version of upath.normalize\n// TODO: this is not equal to path-normalize module - investigate why\nconst normalizePathToUnix = (path) => toUnix(sysPath.normalize(toUnix(path)));\n\nconst normalizeIgnored = (cwd = EMPTY_STR) => (path) => {\n  if (typeof path !== STRING_TYPE) return path;\n  return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));\n};\n\nconst getAbsolutePath = (path, cwd) => {\n  if (sysPath.isAbsolute(path)) {\n    return path;\n  }\n  if (path.startsWith(BANG)) {\n    return BANG + sysPath.join(cwd, path.slice(1));\n  }\n  return sysPath.join(cwd, path);\n};\n\nconst undef = (opts, key) => opts[key] === undefined;\n\n/**\n * Directory entry.\n * @property {Path} path\n * @property {Set<Path>} items\n */\nclass DirEntry {\n  /**\n   * @param {Path} dir\n   * @param {Function} removeWatcher\n   */\n  constructor(dir, removeWatcher) {\n    this.path = dir;\n    this._removeWatcher = removeWatcher;\n    /** @type {Set<Path>} */\n    this.items = new Set();\n  }\n\n  add(item) {\n    const {items} = this;\n    if (!items) return;\n    if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);\n  }\n\n  async remove(item) {\n    const {items} = this;\n    if (!items) return;\n    items.delete(item);\n    if (items.size > 0) return;\n\n    const dir = this.path;\n    try {\n      await readdir(dir);\n    } catch (err) {\n      if (this._removeWatcher) {\n        this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));\n      }\n    }\n  }\n\n  has(item) {\n    const {items} = this;\n    if (!items) return;\n    return items.has(item);\n  }\n\n  /**\n   * @returns {Array<String>}\n   */\n  getChildren() {\n    const {items} = this;\n    if (!items) return;\n    return [...items.values()];\n  }\n\n  dispose() {\n    this.items.clear();\n    delete this.path;\n    delete this._removeWatcher;\n    delete this.items;\n    Object.freeze(this);\n  }\n}\n\nconst STAT_METHOD_F = 'stat';\nconst STAT_METHOD_L = 'lstat';\nclass WatchHelper {\n  constructor(path, watchPath, follow, fsw) {\n    this.fsw = fsw;\n    this.path = path = path.replace(REPLACER_RE, EMPTY_STR);\n    this.watchPath = watchPath;\n    this.fullWatchPath = sysPath.resolve(watchPath);\n    this.hasGlob = watchPath !== path;\n    /** @type {object|boolean} */\n    if (path === EMPTY_STR) this.hasGlob = false;\n    this.globSymlink = this.hasGlob && follow ? undefined : false;\n    this.globFilter = this.hasGlob ? anymatch(path, undefined, ANYMATCH_OPTS) : false;\n    this.dirParts = this.getDirParts(path);\n    this.dirParts.forEach((parts) => {\n      if (parts.length > 1) parts.pop();\n    });\n    this.followSymlinks = follow;\n    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;\n  }\n\n  checkGlobSymlink(entry) {\n    // only need to resolve once\n    // first entry should always have entry.parentDir === EMPTY_STR\n    if (this.globSymlink === undefined) {\n      this.globSymlink = entry.fullParentDir === this.fullWatchPath ?\n        false : {realPath: entry.fullParentDir, linkPath: this.fullWatchPath};\n    }\n\n    if (this.globSymlink) {\n      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);\n    }\n\n    return entry.fullPath;\n  }\n\n  entryPath(entry) {\n    return sysPath.join(this.watchPath,\n      sysPath.relative(this.watchPath, this.checkGlobSymlink(entry))\n    );\n  }\n\n  filterPath(entry) {\n    const {stats} = entry;\n    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);\n    const resolvedPath = this.entryPath(entry);\n    const matchesGlob = this.hasGlob && typeof this.globFilter === FUNCTION_TYPE ?\n      this.globFilter(resolvedPath) : true;\n    return matchesGlob &&\n      this.fsw._isntIgnored(resolvedPath, stats) &&\n      this.fsw._hasReadPermissions(stats);\n  }\n\n  getDirParts(path) {\n    if (!this.hasGlob) return [];\n    const parts = [];\n    const expandedPath = path.includes(BRACE_START) ? braces.expand(path) : [path];\n    expandedPath.forEach((path) => {\n      parts.push(sysPath.relative(this.watchPath, path).split(SLASH_OR_BACK_SLASH_RE));\n    });\n    return parts;\n  }\n\n  filterDir(entry) {\n    if (this.hasGlob) {\n      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));\n      let globstar = false;\n      this.unmatchedGlob = !this.dirParts.some((parts) => {\n        return parts.every((part, i) => {\n          if (part === GLOBSTAR) globstar = true;\n          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);\n        });\n      });\n    }\n    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);\n  }\n}\n\n/**\n * Watches files & directories for changes. Emitted events:\n * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`\n *\n *     new FSWatcher()\n *       .add(directories)\n *       .on('add', path => log('File', path, 'was added'))\n */\nclass FSWatcher extends EventEmitter {\n// Not indenting methods for history sake; for now.\nconstructor(_opts) {\n  super();\n\n  const opts = {};\n  if (_opts) Object.assign(opts, _opts); // for frozen objects\n\n  /** @type {Map<String, DirEntry>} */\n  this._watched = new Map();\n  /** @type {Map<String, Array>} */\n  this._closers = new Map();\n  /** @type {Set<String>} */\n  this._ignoredPaths = new Set();\n\n  /** @type {Map<ThrottleType, Map>} */\n  this._throttled = new Map();\n\n  /** @type {Map<Path, String|Boolean>} */\n  this._symlinkPaths = new Map();\n\n  this._streams = new Set();\n  this.closed = false;\n\n  // Set up default options.\n  if (undef(opts, 'persistent')) opts.persistent = true;\n  if (undef(opts, 'ignoreInitial')) opts.ignoreInitial = false;\n  if (undef(opts, 'ignorePermissionErrors')) opts.ignorePermissionErrors = false;\n  if (undef(opts, 'interval')) opts.interval = 100;\n  if (undef(opts, 'binaryInterval')) opts.binaryInterval = 300;\n  if (undef(opts, 'disableGlobbing')) opts.disableGlobbing = false;\n  opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;\n\n  // Enable fsevents on OS X when polling isn't explicitly enabled.\n  if (undef(opts, 'useFsEvents')) opts.useFsEvents = !opts.usePolling;\n\n  // If we can't use fsevents, ensure the options reflect it's disabled.\n  const canUseFsEvents = FsEventsHandler.canUse();\n  if (!canUseFsEvents) opts.useFsEvents = false;\n\n  // Use polling on Mac if not using fsevents.\n  // Other platforms use non-polling fs_watch.\n  if (undef(opts, 'usePolling') && !opts.useFsEvents) {\n    opts.usePolling = isMacos;\n  }\n\n  // Always default to polling on IBM i because fs.watch() is not available on IBM i.\n  if(isIBMi) {\n    opts.usePolling = true;\n  }\n\n  // Global override (useful for end-developers that need to force polling for all\n  // instances of chokidar, regardless of usage/dependency depth)\n  const envPoll = process.env.CHOKIDAR_USEPOLLING;\n  if (envPoll !== undefined) {\n    const envLower = envPoll.toLowerCase();\n\n    if (envLower === 'false' || envLower === '0') {\n      opts.usePolling = false;\n    } else if (envLower === 'true' || envLower === '1') {\n      opts.usePolling = true;\n    } else {\n      opts.usePolling = !!envLower;\n    }\n  }\n  const envInterval = process.env.CHOKIDAR_INTERVAL;\n  if (envInterval) {\n    opts.interval = Number.parseInt(envInterval, 10);\n  }\n\n  // Editor atomic write normalization enabled by default with fs.watch\n  if (undef(opts, 'atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;\n  if (opts.atomic) this._pendingUnlinks = new Map();\n\n  if (undef(opts, 'followSymlinks')) opts.followSymlinks = true;\n\n  if (undef(opts, 'awaitWriteFinish')) opts.awaitWriteFinish = false;\n  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};\n  const awf = opts.awaitWriteFinish;\n  if (awf) {\n    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;\n    if (!awf.pollInterval) awf.pollInterval = 100;\n    this._pendingWrites = new Map();\n  }\n  if (opts.ignored) opts.ignored = arrify(opts.ignored);\n\n  let readyCalls = 0;\n  this._emitReady = () => {\n    readyCalls++;\n    if (readyCalls >= this._readyCount) {\n      this._emitReady = EMPTY_FN;\n      this._readyEmitted = true;\n      // use process.nextTick to allow time for listener to be bound\n      process.nextTick(() => this.emit(EV_READY));\n    }\n  };\n  this._emitRaw = (...args) => this.emit(EV_RAW, ...args);\n  this._readyEmitted = false;\n  this.options = opts;\n\n  // Initialize with proper watcher.\n  if (opts.useFsEvents) {\n    this._fsEventsHandler = new FsEventsHandler(this);\n  } else {\n    this._nodeFsHandler = new NodeFsHandler(this);\n  }\n\n  // You’re frozen when your heart’s not open.\n  Object.freeze(opts);\n}\n\n// Public methods\n\n/**\n * Adds paths to be watched on an existing FSWatcher instance\n * @param {Path|Array<Path>} paths_\n * @param {String=} _origAdd private; for handling non-existent paths to be watched\n * @param {Boolean=} _internal private; indicates a non-user add\n * @returns {FSWatcher} for chaining\n */\nadd(paths_, _origAdd, _internal) {\n  const {cwd, disableGlobbing} = this.options;\n  this.closed = false;\n  let paths = unifyPaths(paths_);\n  if (cwd) {\n    paths = paths.map((path) => {\n      const absPath = getAbsolutePath(path, cwd);\n\n      // Check `path` instead of `absPath` because the cwd portion can't be a glob\n      if (disableGlobbing || !isGlob(path)) {\n        return absPath;\n      }\n      return normalizePath(absPath);\n    });\n  }\n\n  // set aside negated glob strings\n  paths = paths.filter((path) => {\n    if (path.startsWith(BANG)) {\n      this._ignoredPaths.add(path.slice(1));\n      return false;\n    }\n\n    // if a path is being added that was previously ignored, stop ignoring it\n    this._ignoredPaths.delete(path);\n    this._ignoredPaths.delete(path + SLASH_GLOBSTAR);\n\n    // reset the cached userIgnored anymatch fn\n    // to make ignoredPaths changes effective\n    this._userIgnored = undefined;\n\n    return true;\n  });\n\n  if (this.options.useFsEvents && this._fsEventsHandler) {\n    if (!this._readyCount) this._readyCount = paths.length;\n    if (this.options.persistent) this._readyCount *= 2;\n    paths.forEach((path) => this._fsEventsHandler._addToFsEvents(path));\n  } else {\n    if (!this._readyCount) this._readyCount = 0;\n    this._readyCount += paths.length;\n    Promise.all(\n      paths.map(async path => {\n        const res = await this._nodeFsHandler._addToNodeFs(path, !_internal, 0, 0, _origAdd);\n        if (res) this._emitReady();\n        return res;\n      })\n    ).then(results => {\n      if (this.closed) return;\n      results.filter(item => item).forEach(item => {\n        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));\n      });\n    });\n  }\n\n  return this;\n}\n\n/**\n * Close watchers or start ignoring events from specified paths.\n * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs\n * @returns {FSWatcher} for chaining\n*/\nunwatch(paths_) {\n  if (this.closed) return this;\n  const paths = unifyPaths(paths_);\n  const {cwd} = this.options;\n\n  paths.forEach((path) => {\n    // convert to absolute path unless relative path already matches\n    if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {\n      if (cwd) path = sysPath.join(cwd, path);\n      path = sysPath.resolve(path);\n    }\n\n    this._closePath(path);\n\n    this._ignoredPaths.add(path);\n    if (this._watched.has(path)) {\n      this._ignoredPaths.add(path + SLASH_GLOBSTAR);\n    }\n\n    // reset the cached userIgnored anymatch fn\n    // to make ignoredPaths changes effective\n    this._userIgnored = undefined;\n  });\n\n  return this;\n}\n\n/**\n * Close watchers and remove all listeners from watched paths.\n * @returns {Promise<void>}.\n*/\nclose() {\n  if (this.closed) return this._closePromise;\n  this.closed = true;\n\n  // Memory management.\n  this.removeAllListeners();\n  const closers = [];\n  this._closers.forEach(closerList => closerList.forEach(closer => {\n    const promise = closer();\n    if (promise instanceof Promise) closers.push(promise);\n  }));\n  this._streams.forEach(stream => stream.destroy());\n  this._userIgnored = undefined;\n  this._readyCount = 0;\n  this._readyEmitted = false;\n  this._watched.forEach(dirent => dirent.dispose());\n  ['closers', 'watched', 'streams', 'symlinkPaths', 'throttled'].forEach(key => {\n    this[`_${key}`].clear();\n  });\n\n  this._closePromise = closers.length ? Promise.all(closers).then(() => undefined) : Promise.resolve();\n  return this._closePromise;\n}\n\n/**\n * Expose list of watched paths\n * @returns {Object} for chaining\n*/\ngetWatched() {\n  const watchList = {};\n  this._watched.forEach((entry, dir) => {\n    const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;\n    watchList[key || ONE_DOT] = entry.getChildren().sort();\n  });\n  return watchList;\n}\n\nemitWithAll(event, args) {\n  this.emit(...args);\n  if (event !== EV_ERROR) this.emit(EV_ALL, ...args);\n}\n\n// Common helpers\n// --------------\n\n/**\n * Normalize and emit events.\n * Calling _emit DOES NOT MEAN emit() would be called!\n * @param {EventName} event Type of event\n * @param {Path} path File or directory path\n * @param {*=} val1 arguments to be passed with event\n * @param {*=} val2\n * @param {*=} val3\n * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag\n */\nasync _emit(event, path, val1, val2, val3) {\n  if (this.closed) return;\n\n  const opts = this.options;\n  if (isWindows) path = sysPath.normalize(path);\n  if (opts.cwd) path = sysPath.relative(opts.cwd, path);\n  /** @type Array<any> */\n  const args = [event, path];\n  if (val3 !== undefined) args.push(val1, val2, val3);\n  else if (val2 !== undefined) args.push(val1, val2);\n  else if (val1 !== undefined) args.push(val1);\n\n  const awf = opts.awaitWriteFinish;\n  let pw;\n  if (awf && (pw = this._pendingWrites.get(path))) {\n    pw.lastChange = new Date();\n    return this;\n  }\n\n  if (opts.atomic) {\n    if (event === EV_UNLINK) {\n      this._pendingUnlinks.set(path, args);\n      setTimeout(() => {\n        this._pendingUnlinks.forEach((entry, path) => {\n          this.emit(...entry);\n          this.emit(EV_ALL, ...entry);\n          this._pendingUnlinks.delete(path);\n        });\n      }, typeof opts.atomic === 'number' ? opts.atomic : 100);\n      return this;\n    }\n    if (event === EV_ADD && this._pendingUnlinks.has(path)) {\n      event = args[0] = EV_CHANGE;\n      this._pendingUnlinks.delete(path);\n    }\n  }\n\n  if (awf && (event === EV_ADD || event === EV_CHANGE) && this._readyEmitted) {\n    const awfEmit = (err, stats) => {\n      if (err) {\n        event = args[0] = EV_ERROR;\n        args[1] = err;\n        this.emitWithAll(event, args);\n      } else if (stats) {\n        // if stats doesn't exist the file must have been deleted\n        if (args.length > 2) {\n          args[2] = stats;\n        } else {\n          args.push(stats);\n        }\n        this.emitWithAll(event, args);\n      }\n    };\n\n    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);\n    return this;\n  }\n\n  if (event === EV_CHANGE) {\n    const isThrottled = !this._throttle(EV_CHANGE, path, 50);\n    if (isThrottled) return this;\n  }\n\n  if (opts.alwaysStat && val1 === undefined &&\n    (event === EV_ADD || event === EV_ADD_DIR || event === EV_CHANGE)\n  ) {\n    const fullPath = opts.cwd ? sysPath.join(opts.cwd, path) : path;\n    let stats;\n    try {\n      stats = await stat(fullPath);\n    } catch (err) {}\n    // Suppress event when fs_stat fails, to avoid sending undefined 'stat'\n    if (!stats || this.closed) return;\n    args.push(stats);\n  }\n  this.emitWithAll(event, args);\n\n  return this;\n}\n\n/**\n * Common handler for errors\n * @param {Error} error\n * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag\n */\n_handleError(error) {\n  const code = error && error.code;\n  if (error && code !== 'ENOENT' && code !== 'ENOTDIR' &&\n    (!this.options.ignorePermissionErrors || (code !== 'EPERM' && code !== 'EACCES'))\n  ) {\n    this.emit(EV_ERROR, error);\n  }\n  return error || this.closed;\n}\n\n/**\n * Helper utility for throttling\n * @param {ThrottleType} actionType type being throttled\n * @param {Path} path being acted upon\n * @param {Number} timeout duration of time to suppress duplicate actions\n * @returns {Object|false} tracking object or false if action should be suppressed\n */\n_throttle(actionType, path, timeout) {\n  if (!this._throttled.has(actionType)) {\n    this._throttled.set(actionType, new Map());\n  }\n\n  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n  if (actionPath) {\n    actionPath.count++;\n    return false;\n  }\n\n  let timeoutObject;\n  const clear = () => {\n    const item = action.get(path);\n    const count = item ? item.count : 0;\n    action.delete(path);\n    clearTimeout(timeoutObject);\n    if (item) clearTimeout(item.timeoutObject);\n    return count;\n  };\n  timeoutObject = setTimeout(clear, timeout);\n  const thr = {timeoutObject, clear, count: 0};\n  action.set(path, thr);\n  return thr;\n}\n\n_incrReadyCount() {\n  return this._readyCount++;\n}\n\n/**\n * Awaits write operation to finish.\n * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.\n * @param {Path} path being acted upon\n * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished\n * @param {EventName} event\n * @param {Function} awfEmit Callback to be called when ready for event to be emitted.\n */\n_awaitWriteFinish(path, threshold, event, awfEmit) {\n  let timeoutHandler;\n\n  let fullPath = path;\n  if (this.options.cwd && !sysPath.isAbsolute(path)) {\n    fullPath = sysPath.join(this.options.cwd, path);\n  }\n\n  const now = new Date();\n\n  const awaitWriteFinish = (prevStat) => {\n    fs.stat(fullPath, (err, curStat) => {\n      if (err || !this._pendingWrites.has(path)) {\n        if (err && err.code !== 'ENOENT') awfEmit(err);\n        return;\n      }\n\n      const now = Number(new Date());\n\n      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n\n      if (df >= threshold) {\n        this._pendingWrites.delete(path);\n        awfEmit(undefined, curStat);\n      } else {\n        timeoutHandler = setTimeout(\n          awaitWriteFinish,\n          this.options.awaitWriteFinish.pollInterval,\n          curStat\n        );\n      }\n    });\n  };\n\n  if (!this._pendingWrites.has(path)) {\n    this._pendingWrites.set(path, {\n      lastChange: now,\n      cancelWait: () => {\n        this._pendingWrites.delete(path);\n        clearTimeout(timeoutHandler);\n        return event;\n      }\n    });\n    timeoutHandler = setTimeout(\n      awaitWriteFinish,\n      this.options.awaitWriteFinish.pollInterval\n    );\n  }\n}\n\n_getGlobIgnored() {\n  return [...this._ignoredPaths.values()];\n}\n\n/**\n * Determines whether user has asked to ignore this path.\n * @param {Path} path filepath or dir\n * @param {fs.Stats=} stats result of fs.stat\n * @returns {Boolean}\n */\n_isIgnored(path, stats) {\n  if (this.options.atomic && DOT_RE.test(path)) return true;\n  if (!this._userIgnored) {\n    const {cwd} = this.options;\n    const ign = this.options.ignored;\n\n    const ignored = ign && ign.map(normalizeIgnored(cwd));\n    const paths = arrify(ignored)\n      .filter((path) => typeof path === STRING_TYPE && !isGlob(path))\n      .map((path) => path + SLASH_GLOBSTAR);\n    const list = this._getGlobIgnored().map(normalizeIgnored(cwd)).concat(ignored, paths);\n    this._userIgnored = anymatch(list, undefined, ANYMATCH_OPTS);\n  }\n\n  return this._userIgnored([path, stats]);\n}\n\n_isntIgnored(path, stat) {\n  return !this._isIgnored(path, stat);\n}\n\n/**\n * Provides a set of common helpers and properties relating to symlink and glob handling.\n * @param {Path} path file, directory, or glob pattern being watched\n * @param {Number=} depth at any depth > 0, this isn't a glob\n * @returns {WatchHelper} object containing helpers for this path\n */\n_getWatchHelpers(path, depth) {\n  const watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);\n  const follow = this.options.followSymlinks;\n\n  return new WatchHelper(path, watchPath, follow, this);\n}\n\n// Directory helpers\n// -----------------\n\n/**\n * Provides directory tracking objects\n * @param {String} directory path of the directory\n * @returns {DirEntry} the directory's tracking object\n */\n_getWatchedDir(directory) {\n  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);\n  const dir = sysPath.resolve(directory);\n  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));\n  return this._watched.get(dir);\n}\n\n// File helpers\n// ------------\n\n/**\n * Check for read permissions.\n * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405\n * @param {fs.Stats} stats - object, result of fs_stat\n * @returns {Boolean} indicates whether the file can be read\n*/\n_hasReadPermissions(stats) {\n  if (this.options.ignorePermissionErrors) return true;\n\n  // stats.mode may be bigint\n  const md = stats && Number.parseInt(stats.mode, 10);\n  const st = md & 0o777;\n  const it = Number.parseInt(st.toString(8)[0], 10);\n  return Boolean(4 & it);\n}\n\n/**\n * Handles emitting unlink events for\n * files and directories, and via recursion, for\n * files and directories within directories that are unlinked\n * @param {String} directory within which the following item is located\n * @param {String} item      base path of item/directory\n * @returns {void}\n*/\n_remove(directory, item, isDirectory) {\n  // if what is being deleted is a directory, get that directory's paths\n  // for recursive deleting and cleaning of watched object\n  // if it is not a directory, nestedDirectoryChildren will be empty array\n  const path = sysPath.join(directory, item);\n  const fullPath = sysPath.resolve(path);\n  isDirectory = isDirectory != null\n    ? isDirectory\n    : this._watched.has(path) || this._watched.has(fullPath);\n\n  // prevent duplicate handling in case of arriving here nearly simultaneously\n  // via multiple paths (such as _handleFile and _handleDir)\n  if (!this._throttle('remove', path, 100)) return;\n\n  // if the only watched file is removed, watch for its return\n  if (!isDirectory && !this.options.useFsEvents && this._watched.size === 1) {\n    this.add(directory, item, true);\n  }\n\n  // This will create a new entry in the watched object in either case\n  // so we got to do the directory check beforehand\n  const wp = this._getWatchedDir(path);\n  const nestedDirectoryChildren = wp.getChildren();\n\n  // Recursively remove children directories / files.\n  nestedDirectoryChildren.forEach(nested => this._remove(path, nested));\n\n  // Check if item was on the watched list and remove it\n  const parent = this._getWatchedDir(directory);\n  const wasTracked = parent.has(item);\n  parent.remove(item);\n\n  // Fixes issue #1042 -> Relative paths were detected and added as symlinks\n  // (https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),\n  // but never removed from the map in case the path was deleted.\n  // This leads to an incorrect state if the path was recreated:\n  // https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553\n  if (this._symlinkPaths.has(fullPath)) {\n    this._symlinkPaths.delete(fullPath);\n  }\n\n  // If we wait for this file to be fully written, cancel the wait.\n  let relPath = path;\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\n    const event = this._pendingWrites.get(relPath).cancelWait();\n    if (event === EV_ADD) return;\n  }\n\n  // The Entry will either be a directory that just got removed\n  // or a bogus entry to a file, in either case we have to remove it\n  this._watched.delete(path);\n  this._watched.delete(fullPath);\n  const eventName = isDirectory ? EV_UNLINK_DIR : EV_UNLINK;\n  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);\n\n  // Avoid conflicts if we later create another file with the same name\n  if (!this.options.useFsEvents) {\n    this._closePath(path);\n  }\n}\n\n/**\n * Closes all watchers for a path\n * @param {Path} path\n */\n_closePath(path) {\n  this._closeFile(path)\n  const dir = sysPath.dirname(path);\n  this._getWatchedDir(dir).remove(sysPath.basename(path));\n}\n\n/**\n * Closes only file-specific watchers\n * @param {Path} path\n */\n_closeFile(path) {\n  const closers = this._closers.get(path);\n  if (!closers) return;\n  closers.forEach(closer => closer());\n  this._closers.delete(path);\n}\n\n/**\n *\n * @param {Path} path\n * @param {Function} closer\n */\n_addPathCloser(path, closer) {\n  if (!closer) return;\n  let list = this._closers.get(path);\n  if (!list) {\n    list = [];\n    this._closers.set(path, list);\n  }\n  list.push(closer);\n}\n\n_readdirp(root, opts) {\n  if (this.closed) return;\n  const options = {type: EV_ALL, alwaysStat: true, lstat: true, ...opts};\n  let stream = readdirp(root, options);\n  this._streams.add(stream);\n  stream.once(STR_CLOSE, () => {\n    stream = undefined;\n  });\n  stream.once(STR_END, () => {\n    if (stream) {\n      this._streams.delete(stream);\n      stream = undefined;\n    }\n  });\n  return stream;\n}\n\n}\n\n// Export FSWatcher class\nexports.FSWatcher = FSWatcher;\n\n/**\n * Instantiates watcher with paths to be tracked.\n * @param {String|Array<String>} paths file/directory paths and/or globs\n * @param {Object=} options chokidar opts\n * @returns an instance of FSWatcher for chaining.\n */\nconst watch = (paths, options) => {\n  const watcher = new FSWatcher(options);\n  watcher.add(paths);\n  return watcher;\n};\n\nexports.watch = watch;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}