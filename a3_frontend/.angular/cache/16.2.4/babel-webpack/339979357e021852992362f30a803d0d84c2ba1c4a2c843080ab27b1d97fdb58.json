{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/flex-layout/flex\";\nimport * as i3 from \"@angular/material/core\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/list\";\nfunction AppComponent_mat_list_item_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const value_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Numerical Value: \", value_r2, \"\");\n  }\n}\nfunction AppComponent_mat_list_item_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const value_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Numerical Value: \", value_r3, \"\");\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.numericalValues = [];\n  }\n  ngOnInit() {\n    // Simulated data update every second\n    setInterval(() => {\n      this.numericalValues = this.generateRandomValues();\n    }, 1000);\n  }\n  generateRandomValues() {\n    // Generate 8 random numerical values for demonstration\n    return Array.from({\n      length: 8\n    }, () => Math.floor(Math.random() * 100));\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 17,\n    vars: 2,\n    consts: [[\"fxLayout\", \"row\", \"fxLayout.xs\", \"column\", \"fxLayoutAlign\", \"start start\", \"fxLayoutGap\", \"16px\"], [\"fxFlex\", \"50%\", \"fxFlex.xs\", \"100%\"], [1, \"scrollable-data\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-line\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"mat-card\")(3, \"mat-card-content\")(4, \"h3\");\n        i0.ɵɵtext(5, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 2)(7, \"mat-list\");\n        i0.ɵɵtemplate(8, AppComponent_mat_list_item_8_Template, 3, 1, \"mat-list-item\", 3);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(9, \"div\", 1)(10, \"mat-card\")(11, \"mat-card-content\")(12, \"h3\");\n        i0.ɵɵtext(13, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 2)(15, \"mat-list\");\n        i0.ɵɵtemplate(16, AppComponent_mat_list_item_16_Template, 3, 1, \"mat-list-item\", 3);\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.numericalValues);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.numericalValues);\n      }\n    },\n    dependencies: [i1.NgForOf, i2.DefaultLayoutDirective, i2.DefaultLayoutGapDirective, i2.DefaultLayoutAlignDirective, i2.DefaultFlexDirective, i3.MatLine, i4.MatCard, i4.MatCardContent, i5.MatList, i5.MatListItem],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","value_r2","value_r3","AppComponent","constructor","numericalValues","ngOnInit","setInterval","generateRandomValues","Array","from","length","Math","floor","random","_","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵtemplate","AppComponent_mat_list_item_8_Template","AppComponent_mat_list_item_16_Template","ɵɵproperty"],"sources":["C:\\Users\\annag\\OneDrive\\Pulpit\\a3_backend\\a3_frontend\\src\\app\\app.component.ts","C:\\Users\\annag\\OneDrive\\Pulpit\\a3_backend\\a3_frontend\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  numericalValues: number[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    // Simulated data update every second\n    setInterval(() => {\n      this.numericalValues = this.generateRandomValues();\n    }, 1000);\n  }\n\n  private generateRandomValues(): number[] {\n    // Generate 8 random numerical values for demonstration\n    return Array.from({ length: 8 }, () => Math.floor(Math.random() * 100));\n  }\n}\n","<div fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"16px\">\n  <!-- Left Grid Element -->\n  <div fxFlex=\"50%\" fxFlex.xs=\"100%\">\n    <mat-card>\n      <mat-card-content>\n        <h3>Title</h3>\n        <div class=\"scrollable-data\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let value of numericalValues\">\n              <p mat-line>Numerical Value: {{ value }}</p>\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n  <!-- Right Grid Element -->\n  <div fxFlex=\"50%\" fxFlex.xs=\"100%\">\n    <mat-card>\n      <mat-card-content>\n        <h3>Title</h3>\n        <div class=\"scrollable-data\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let value of numericalValues\">\n              <p mat-line>Numerical Value: {{ value }}</p>\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n"],"mappings":";;;;;;;;ICQYA,EAAA,CAAAC,cAAA,oBAAqD;IACvCD,EAAA,CAAAE,MAAA,GAA4B;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAhCH,EAAA,CAAAI,SAAA,GAA4B;IAA5BJ,EAAA,CAAAK,kBAAA,sBAAAC,QAAA,KAA4B;;;;;IAe1CN,EAAA,CAAAC,cAAA,oBAAqD;IACvCD,EAAA,CAAAE,MAAA,GAA4B;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAhCH,EAAA,CAAAI,SAAA,GAA4B;IAA5BJ,EAAA,CAAAK,kBAAA,sBAAAE,QAAA,KAA4B;;;ADlBtD,OAAM,MAAOC,YAAY;EAGvBC,YAAA;IAFA,KAAAC,eAAe,GAAa,EAAE;EAEd;EAEhBC,QAAQA,CAAA;IACN;IACAC,WAAW,CAAC,MAAK;MACf,IAAI,CAACF,eAAe,GAAG,IAAI,CAACG,oBAAoB,EAAE;IACpD,CAAC,EAAE,IAAI,CAAC;EACV;EAEQA,oBAAoBA,CAAA;IAC1B;IACA,OAAOC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAC,CAAE,EAAE,MAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;EACzE;EAAC,QAAAC,CAAA,G;qBAfUZ,YAAY;EAAA;EAAA,QAAAa,EAAA,G;UAAZb,YAAY;IAAAc,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCPzB5B,EAAA,CAAAC,cAAA,aAAwF;QAK5ED,EAAA,CAAAE,MAAA,YAAK;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACdH,EAAA,CAAAC,cAAA,aAA6B;QAEzBD,EAAA,CAAA8B,UAAA,IAAAC,qCAAA,2BAEgB;QAClB/B,EAAA,CAAAG,YAAA,EAAW;QAOnBH,EAAA,CAAAC,cAAA,aAAmC;QAGzBD,EAAA,CAAAE,MAAA,aAAK;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACdH,EAAA,CAAAC,cAAA,cAA6B;QAEzBD,EAAA,CAAA8B,UAAA,KAAAE,sCAAA,2BAEgB;QAClBhC,EAAA,CAAAG,YAAA,EAAW;;;QAnBwBH,EAAA,CAAAI,SAAA,GAAkB;QAAlBJ,EAAA,CAAAiC,UAAA,YAAAJ,GAAA,CAAAnB,eAAA,CAAkB;QAgBlBV,EAAA,CAAAI,SAAA,GAAkB;QAAlBJ,EAAA,CAAAiC,UAAA,YAAAJ,GAAA,CAAAnB,eAAA,CAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}