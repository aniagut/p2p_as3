{"ast":null,"code":"import { catchError, interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/flex-layout/flex\";\nimport * as i4 from \"@angular/material/core\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/list\";\nfunction AppComponent_mat_list_item_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", item_r2.key, \": \", item_r2.value, \"\");\n  }\n}\nfunction AppComponent_mat_list_item_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const value_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Numerical Value: \", value_r3, \"\");\n  }\n}\nconst _c0 = function () {\n  return [1, 1, 1, 1, 1, 1, 1, 1, 1];\n};\nexport class AppComponent {\n  constructor(httpClient, changeDetectorRef) {\n    this.httpClient = httpClient;\n    this.changeDetectorRef = changeDetectorRef;\n    this.mqttEndpoint = 'http://localhost:3000/api/v1/sensors/air-quality/latestData/mqtt';\n    this.core2Endpoint = 'http://localhost:3000/api/v1/sensors/air-quality/latestData/core2';\n    this.latestMqttData = {};\n    this.latestCore2Data = {};\n    this.errorMqtt = false;\n    this.errorCore2 = false;\n  }\n  ngOnInit() {\n    this.listenForChanges();\n  }\n  listenForChanges() {\n    interval(1000).subscribe(_ => {\n      this.httpClient.get(this.mqttEndpoint).pipe(catchError(err => {\n        this.errorMqtt = true;\n        throw err;\n      })).subscribe(resp => {\n        if (resp.status == 200) {\n          this.errorMqtt = false;\n          this.latestMqttData = resp.body;\n          this.changeDetectorRef.markForCheck();\n          console.log(this.latestMqttData);\n        } else {\n          this.errorMqtt = true;\n        }\n      });\n      this.httpClient.get(this.core2Endpoint).pipe(catchError(err => {\n        this.errorCore2 = true;\n        throw err;\n      })).subscribe(resp => {\n        if (resp.status == 200) {\n          this.errorCore2 = false;\n          this.latestCore2Data = resp.body;\n        } else {\n          this.errorCore2 = true;\n        }\n      });\n    });\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 20,\n    vars: 5,\n    consts: [[\"fxLayout\", \"row\", \"fxLayout.xs\", \"column\", \"fxLayoutAlign\", \"start start\", \"fxLayoutGap\", \"16px\"], [\"fxFlex\", \"50%\", \"fxFlex.xs\", \"100%\"], [1, \"scrollable-list\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-line\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Daring Do awesome IoT measuring data displaying tool!!!!!!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 1)(4, \"mat-card\")(5, \"mat-card-content\")(6, \"h3\");\n        i0.ɵɵtext(7, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"mat-list\");\n        i0.ɵɵtemplate(10, AppComponent_mat_list_item_10_Template, 3, 2, \"mat-list-item\", 3);\n        i0.ɵɵpipe(11, \"keyvalue\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(12, \"div\", 1)(13, \"mat-card\")(14, \"mat-card-content\")(15, \"h3\");\n        i0.ɵɵtext(16, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 2)(18, \"mat-list\");\n        i0.ɵɵtemplate(19, AppComponent_mat_list_item_19_Template, 3, 1, \"mat-list-item\", 3);\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 2, ctx.latestMqttData));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(4, _c0));\n      }\n    },\n    dependencies: [i2.NgForOf, i3.DefaultLayoutDirective, i3.DefaultLayoutGapDirective, i3.DefaultLayoutAlignDirective, i3.DefaultFlexDirective, i4.MatLine, i5.MatCard, i5.MatCardContent, i6.MatList, i6.MatListItem, i2.KeyValuePipe],\n    styles: [\".scrollable-list[_ngcontent-%COMP%] {\\n  max-height: 500px;\\n  overflow-y: auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsaUJBQUE7RUFDQSxnQkFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLnNjcm9sbGFibGUtbGlzdCB7XHJcbiAgbWF4LWhlaWdodDogNTAwcHg7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"],\n    changeDetection: 0\n  });\n}","map":{"version":3,"names":["catchError","interval","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","item_r2","key","value","ɵɵtextInterpolate1","value_r3","AppComponent","constructor","httpClient","changeDetectorRef","mqttEndpoint","core2Endpoint","latestMqttData","latestCore2Data","errorMqtt","errorCore2","ngOnInit","listenForChanges","subscribe","_","get","pipe","err","resp","status","body","markForCheck","console","log","ɵɵdirectiveInject","i1","HttpClient","ChangeDetectorRef","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵtemplate","AppComponent_mat_list_item_10_Template","AppComponent_mat_list_item_19_Template","ɵɵproperty","ɵɵpipeBind1","ɵɵpureFunction0","_c0"],"sources":["C:\\Users\\annag\\OneDrive\\Pulpit\\a3_backend\\a3_frontend\\src\\app\\app.component.ts","C:\\Users\\annag\\OneDrive\\Pulpit\\a3_backend\\a3_frontend\\src\\app\\app.component.html"],"sourcesContent":["import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\n// import * as fs from 'fs';\n// import * as csvParser from 'csv-parser';\n// import * as chokidar from 'chokidar';\nimport { HttpClient } from '@angular/common/http';\nimport {catchError, interval } from 'rxjs';\nimport {KeyValue} from '@angular/common';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent implements OnInit {\n  mqttEndpoint: string = 'http://localhost:3000/api/v1/sensors/air-quality/latestData/mqtt';\n  core2Endpoint: string = 'http://localhost:3000/api/v1/sensors/air-quality/latestData/core2';\n  latestMqttData: {[p:string]: any} = {};\n  latestCore2Data: {[p:string]: any} = {};\n  errorMqtt = false;\n  errorCore2 = false;\n\n\n\n  constructor(private readonly httpClient: HttpClient,\n              private readonly changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.listenForChanges();\n  }\n\n  private listenForChanges(): void {\n    interval(1000).subscribe(_ => {\n      this.httpClient.get<Response>(this.mqttEndpoint).pipe(catchError(err => {\n        this.errorMqtt = true;\n        throw err;\n      })).subscribe(resp => {\n        if (resp.status == 200) {\n          this.errorMqtt = false;\n          this.latestMqttData = resp.body as { [p: string]: any };\n          this.changeDetectorRef.markForCheck();\n          console.log(this.latestMqttData);\n        } else {\n          this.errorMqtt = true;\n        }\n      });\n      this.httpClient.get<Response>(this.core2Endpoint).pipe(catchError(err => {\n        this.errorCore2 = true;\n        throw err;\n      })).subscribe(resp => {\n        if (resp.status == 200) {\n          this.errorCore2 = false;\n          this.latestCore2Data = resp.body as { [p: string]: any };\n        } else {\n          this.errorCore2 = true;\n        }\n      });\n    });\n  }\n\n  //   this.csvCore2Watcher.on('change', (path: string) => {\n  //\n  //     // Read the updated CSV file\n  //     fs.readFile(this.csvCore2FilePath, 'utf-8', (err, data) => {\n  //       if (err) {\n  //         console.error('Error reading file:', err);\n  //         return;\n  //       }\n  //\n  //       this.readFirstLineFromCsv(data)\n  //         .then((line) => {\n  //           console.log(line);\n  //           if (line) {\n  //             console.log('First Line:', line);\n  //             // Update your UI component here with the new data (e.g., using a service or an event)\n  //           } else {\n  //             console.log('No lines found in the CSV.');\n  //           }\n  //         })\n  //         .catch((error) => {\n  //           console.error('Error:', error);\n  //         });\n  //     });\n  //   });\n  // }\n  //\n  // private readFirstLineFromCsv(csvString: string): Promise<string | null> {\n  //   return new Promise((resolve, reject) => {\n  //     const firstLine = csvString.split('\\n')[0];\n  //     if (!firstLine) {\n  //       resolve(null);\n  //       return;\n  //     }\n  //\n  //     const parser = csvParser({ headers: false });\n  //     const readStream = require('stream').Readable.from([firstLine]);\n  //\n  //     readStream.pipe(parser);\n  //\n  //     parser.on('data', (data) => {\n  //       readStream.destroy();\n  //       resolve(data);\n  //     });\n  //\n  //     parser.on('error', (error) => {\n  //       reject(error);\n  //     });\n  //   });\n  // }\n  //\n  // private getLatestData(type: string) {\n  //   const line = fs.readFileSync(type == 'core2' ? 'core2_measurements.csv': 'mqtt_measurements.csv')\n  // }\n  //\n  // private generateRandomValues(): number[] {\n  //   // Generate 8 random numerical values for demonstration\n  //   return Array.from({ length: 8 }, () => Math.floor(Math.random() * 100));\n  // }\n}\n","<h1>Daring Do awesome IoT measuring data displaying tool!!!!!!</h1>\n<div fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"16px\">\n  <!-- Left Grid Element -->\n  <div fxFlex=\"50%\" fxFlex.xs=\"100%\">\n    <mat-card>\n      <mat-card-content>\n        <h3>Title</h3>\n        <div class=\"scrollable-list\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of latestMqttData | keyvalue\">\n              <p mat-line>{{item.key}}: {{ item.value }}</p>\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n  <!-- Right Grid Element -->\n  <div fxFlex=\"50%\" fxFlex.xs=\"100%\">\n    <mat-card>\n      <mat-card-content>\n        <h3>Title</h3>\n        <div class=\"scrollable-list\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let value of [1,1,1,1,1,1,1,1,1]\">\n              <p mat-line>Numerical Value: {{ value }}</p>\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}